datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id                Int      @id @default(autoincrement())
  name              String?
  email             String   @unique
  password          String
  role              String  @default("user") // Default role
  news              News[]   // Back-reference for relation to News
  Votes             Vote[]
  Coins             Coin[]
  IcoScamComment    IcoScamComment[]
  watchlistCoins    WatchlistCoin[]
}

model Coin {
  id                      Int      @id @default(autoincrement())
  name                    String
  logo                    String
  symbol                  String
  launchDate              DateTime
  auditLink               String?
  teamDoxxed              String?
  softcap                 Float?
  presaleLink             String?
  hardcap                 Float?
  presaleDate             DateTime?
  whitelist               Boolean?
  description             String
  socials                 Json     // Use JSON to store social links as embedded data
  contactEmail            String
  contactTelegram         String
  marketCap               Float?
  price                   Float?
  volume                  Float?
  user                    User?    @relation(fields: [userId], references: [id])
  userId                  Int?

  // Back-references
  promotedCoins           PromotedCoin[] // A coin can have many promotedCoin entries
  hottestPairs            HottestPair[]  // A coin can have many hottestPair entries
  tokenContractAddress    TokenContractAddress[]
  Votes                   Vote[]
  watchlistCoins          WatchlistCoin[]
}

model TokenContractAddress {
  id            Int     @id @default(autoincrement())
  coin          Coin    @relation(fields: [coinId], references: [id])
  coinId        Int
  Chain         String
  Address       String
}

model Vote {
  id          Int       @id @default(autoincrement())
  coin        Coin      @relation(fields: [coinId], references: [id])
  coinId      Int
  user        User      @relation(fields: [userId], references: [id])
  userId      Int
  date        DateTime  @default(now())
}

model WatchlistCoin {
  id        Int       @id @default(autoincrement())
  userId    Int
  user      User      @relation(fields: [userId], references: [id])
  coinId    Int
  coin      Coin      @relation(fields: [coinId], references: [id])
}

model Banner {
  id         Int      @id @default(autoincrement())
  name       String
  url        String
  media      String
  launchDate DateTime
  endDate    DateTime
  placement  String
  value      Float
  status     String
  mediaType  String
}

model PromotedCoin {
  id        Int      @id @default(autoincrement())
  coinId    Int
  status    Boolean  // Change this to Boolean
  startDate DateTime
  endDate   DateTime
  coin      Coin     @relation(fields: [coinId], references: [id])
}

model HottestPair {
  id         Int      @id @default(autoincrement())
  coin       Coin     @relation(fields: [coinId], references: [id])
  coinId     Int
  startDate  DateTime
  endDate    DateTime
  status     Boolean
}

model News {
  id          Int      @id @default(autoincrement())
  title       String
  thumbnail   String
  date        DateTime
  description String
  tags        Json     // Use JSON instead of list of strings
  categories  String     // Use JSON instead of list of strings
  status      String
  user        User?    @relation(fields: [userId], references: [id])
  userId      Int?
}

model Meta {
  id           Int      @id @default(autoincrement())
  visitorIp    String
  visitTime    DateTime
  location     String
  browser      String
  os           String
  device       String
  duration     Int      // Time spent on the site in seconds
  referrer     String?  // Optional: referrer URL
  pageViews    Int      // Number of pages viewed during the visit
  // Other details you want to track can be added here
}


model Partner {
  id          Int       @id @default(autoincrement())
  logo        String
  title       String
  description String
  link        String
}

model IcoScam {
  id                Int       @id @default(autoincrement())
  logo              String
  title             String
  description       String
  status            IcoScamStatus
  IcoScamComment    IcoScamComment[]
}

enum IcoScamStatus {
  COMPLAIN
  UNDER_REVIEW
  SCAM_ICO
}

model IcoScamComment {
  id             Int                @id @default(autoincrement())
  IcoScamId      Int
  IcoScam        IcoScam            @relation(fields: [IcoScamId], references: [id])
  userId         Int
  user           User                @relation(fields: [userId], references: [id])
  comment        String
  replayId       Int?
  replay         IcoScamComment?    @relation("ReplyToComment", fields: [replayId], references: [id]) // Define the self-relation

  // Optional: Add a back-reference to get all replies
  replies        IcoScamComment[]    @relation("ReplyToComment")
}
